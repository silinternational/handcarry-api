type Query {

    """
    Meetings, aka Events. With no parameters supplied, only future meetings are returned.
    NOT YET IMPLEMENTED: `endAfter`, `endBefore`, `startafter`, `startBefore`
    """
    meetings(
        """
        NOT YET IMPLEMENTED --
        Only include meetings that have an `endDate` after a given day
        """
        endAfter: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have an `endDate` before a given day
        """
        endBefore: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have a `startDate` after a given day
        """
        startAfter: Date

        """
        NOT YET IMPLEMENTED --
        Only include meetings that have a `startDate` before a given day
        """
        startBefore: Date
    ): [Meeting!]!

    "Return a specific meeting (event). If the meeting is not visible to the auth user, an error will be returned."
    meeting(id: ID): Meeting

    "Return a specific message. If the message is not visible to the auth user, an error will be returned."
    message(id: ID): Message!

    "Provides a list of message threads in which the auth user is participating."
    myThreads: [Thread!]!

    "Provides a list of all of the auth user's watches."
    myWatches: [Watch!]!

    "Return a specific organization. Only Super Admins, Sales Admins, and Admins for the requested org are authorized."
    organization(id: ID): Organization!

    "Provides a list of all organizations for which the user is an Admin. Super Admins and Sales Admins see all orgs."
    organizations: [Organization!]!

#    'request' is disabled because it doesn't work for shared requests from a trusted org
#    request(id: ID): Request

    """
    With no parameters supplied, all requests visible to the authenticated user are returned. Filter
    parameters only remove from this default list and never include requests that are not visible to the authenticated
    user. For requests associated with a `User` or `Meeting`, use the `requests` field on `User` and `Meeting`.
    """
    requests(
        "Only include requests that have a destination near the given location."
        destination: LocationInput,

        "Only include requests that have an origin near the given location."
        origin: LocationInput

        "Search by text in `title` or `description`"
        searchText: String
    ): [Request!]!

    """
    DEPRECATED: `Query.recentMeetings` will be replaced by the `endAfter` parameter of `Query.meetings`
    """
    recentMeetings: [Meeting!]! @deprecated(reason: "`Query.recentMeetings` will be replaced by `endAfter` parameter of `Query.meetings`")

    "Lists all threads, regardless of visibility. Note that some thread fields may cause authorization errors."
    threads: [Thread!]!

    """
    Return a specific user. If the ID is not specified, the authenticated user is returned. Only Super Admins are
    authorized to query a user record other than their own.
    """
    user(id: ID): User

    "List all users in the system. Only Super Admins are authorized for this query."
    users: [User!]!
}

type Mutation {
    "Create a new meeting (event). At this time, any user may create a meeting."
    createMeeting(input: CreateMeetingInput!): Meeting!

    "Update an existing meeting (event). The meeting creator, Super Admins, Sales Admins, and Admins are authorized."
    updateMeeting(input: UpdateMeetingInput!): Meeting!

    """
    Bulk create `MeetingInvite`s and return the updated list of invites for the specified meeting. Subsequent calls
    can include existing email addresses without error since duplicates are ignored.
    """
    createMeetingInvites(input: CreateMeetingInvitesInput!): [MeetingInvite!]!

    "Remove a `MeetingInvite` and return the remaining invites for the `Meeting`"
    removeMeetingInvite(input: RemoveMeetingInviteInput!): [MeetingInvite!]!

    """
    Create a new `MeetingParticipant` either from a `MeetingInvite`, or by self-joining a meeting. Note that this
    mutation can only be used by a pre-existing user; new users must go through the REST API login process. If the
    `Meeting` is not `INVITE_ONLY`, no `MeetingInvitation` is needed and the `confirmationCode` may be omitted.
    """
    createMeetingParticipant(input: CreateMeetingParticipantInput!): MeetingParticipant!

    "Remove a `MeetingParticipant` and return the remaining participants for the `Meeting`"
    removeMeetingParticipant(input: RemoveMeetingParticipantInput!): [MeetingParticipant!]!

    "Create a new message. Only authorized for requests visible to the auth user."
    createMessage(input: CreateMessageInput!): Message!

    "Create a new organization. Authorized for Super Admins and Sales Admins."
    createOrganization(input: CreateOrganizationInput!): Organization!

    "Update organization properties. Authorized for Super Admins, Sales Admins, and Org Admins on the specified Org."
    updateOrganization(input: UpdateOrganizationInput!): Organization!

    """
    Add a domain to an Organization's domain list. No two organizations may have the same domain. Authorized for Super
    Admins, Sales Admins, and Org Admins on the specified Organization.
    """
    createOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!

    """
    Remove a domain from an Organization's domain list. Authorized for Super Admins, Sales Admins, and Org Admins on the
    specified Organization.
    """
    removeOrganizationDomain(input: RemoveOrganizationDomainInput!): [OrganizationDomain!]!

    """
    Update an Organization's domain properties. Cannot be used to change an existing domain name. Authorized for Super
    Admins, Sales Admins, and Org Admins on the specified Organization.
    """
    updateOrganizationDomain(input: CreateOrganizationDomainInput!): [OrganizationDomain!]!

    """
    Create a trust relationship (affilition) between two Organizations. At the present time, this creates a mutual
    trust between the two specified Organizations. A trust allows requests and meetings (events) to be visible
    to users of a different Organization than their own.  Authorized for Super Admins and Sales Admins.
    """
    createOrganizationTrust(input: CreateOrganizationTrustInput!): Organization!

    """
    Remove a trust relationship (affiliation) between two Organizations.  At the present time, this removes both sides
    of a mutual trust between the two specified Organizations. Authorized for Super Admins, Sales Admins, and Org Admins
    on the primary Organization.
    """
    removeOrganizationTrust(input: RemoveOrganizationTrustInput!): Organization!

    """
    Create a new Request. Any user may create a standard Request. For meeting-related requests, the meeting must be
    visible to the auth user.
    """
    createRequest(input: CreateRequestInput!): Request!

    """
    Update Request properties. The auth user must be the request creator or a Super Admin, and the request must be in
    an editable state (e.g. not COMPLETED) as identified by the `isEditable` field.
    """
    updateRequest(input: UpdateRequestInput!): Request!

    """
    Update the Status field on a Request. The request creator and Super Admins can make most status changes. The
    provider can make limited changes (e.g. to DELIVERED).
    """
    updateRequestStatus(input: UpdateRequestStatusInput!): Request!

    "Make an offer to carry a request. Only allowed if the status is OPEN and the request is visible to the auth user."
    addMeAsPotentialProvider(requestID: String!): Request!

    "Cancel a carry offer by auth user. Authorized for the request creator, the potential provider, and Super Admins."
    removeMeAsPotentialProvider(requestID: String!): Request!

    "Cancel a carry offer for any user. Authorized for the request creator, the potential provider, and Super Admins."
    rejectPotentialProvider(requestID: String!, userID: String!): Request!

    "Provider changes the status of a request to DELIVERED"
    markRequestAsDelivered(requestID: String!): Request!

    "Requester changes the status of a request to RECEIVED"
    markRequestAsReceived(requestID: String!): Request!

    """
    Set the LastViewedAt time for a message thread. Effectively clears the unread status of messages updated before the
    given time. The auth user must be a participant (i.e. sent or received a message) in the specified thread.
    """
    setThreadLastViewedAt(input: SetThreadLastViewedAtInput!): Thread!

    "Update User profile information. If ID is not specified, the authenticated user is assumed."
    updateUser(input: UpdateUserInput!): User!

    """
    Create a Watch for specified filter criteria. New requests matching all of the given criteria will
    generate a new notification. Any user may create a Watch.
    """
    createWatch(input: CreateWatchInput!): Watch!

    "Remove a Watch. Only the Watch creator is authorized."
    removeWatch(input: RemoveWatchInput!): [Watch!]!

    "Update Watch properties. Only the Watch creator is authorized."
    updateWatch(input: UpdateWatchInput!): Watch!
}

"Date in ISO-8601 format (e.g. 2020-02-11)"
scalar Date

"Date and Time in ISO-8601 format (e.g. 2020-02-11T18:08:56Z)"
scalar Time

"Authorization types"
enum AuthType {
    "Microsoft Azure AD (Office 365)"
    AZURADV2
    "Default to Organization's AuthType (only valid on OrganizationDomain)"
    DEFAULT
    "Google OAUTH 2.0"
    GOOGLE
    "SAML 2.0"
    SAML
}

"Visibility for Meetings (Events), determines who can see a `Meeting`."
enum MeetingVisibility {
    "Visible to invitees and all app users"
    ALL
    "Visible to invitees and members of the `Meeting` organization and affiliated organizations"
    TRUSTED
    "Visible to invitees and members of the `Meeting` organization"
    ORGANIZATION
    "Visible only to invitees"
    INVITE_ONLY
}

"Context of a User with respect to a Request"
enum RequestRole {
    "Requests created by the User"
    CREATEDBY
    "Requests provided by the User. Requests where the user is a PotentialProvider are not included."
    PROVIDING
}

"Allowed sizes for Requests."
enum RequestSize {
    "Tiny: fits in a purse or small backpack, often identified by airlines as a person item"
    TINY
    "Small: fits in a carry-on bag or suitcase"
    SMALL
    "Medium: fits in a large backpack, such as a large hiking backpack or duffel bag"
    MEDIUM
    "Large: fits in a large suitcase"
    LARGE
    "Extra-large: larger than what would fit in a full-size suitcase"
    XLARGE
}

"Valid states for Request Status"
enum RequestStatus {
    "Open: no provider has been selected by the receiver"
    OPEN
    "Accepted: a provider was selected by the receiver, but the carry has not been completed"
    ACCEPTED
    "Delivered: the provider has said the carry was completed"
    DELIVERED
    "Received: the receiver has said the carry was completed"
    RECEIVED
    "Completed: both the provider and receiver have agreed the carry was completed"
    COMPLETED
    "Removed: the request was canceled (removed) by the receiver"
    REMOVED
}

"Visibility for Requests, ALL organizations, TRUSTED organizations, or SAME organization only"
enum RequestVisibility {
    "Visible to all users from all organizations in the system"
    ALL
    "Visible to users from all organizations trusted by the Request creator's organization"
    TRUSTED
    "Visible only to users from the same organization as the Request creator"
    SAME
}

"User's preferred language, used for translation of system text messages. (ISO 639-1 code)"
enum PreferredLanguage {
    "English"    EN
    "French"     FR
    "Spanish"    ES
    "Korean"     KO
    "Portuguese" PT
}

"User's preferred weight units"
enum PreferredWeightUnit {
    POUNDS
    KILOGRAMS
}

"User Admin roles"
enum UserAdminRole {
    SUPERADMIN
    SALESADMIN
    ADMIN
    USER
}

"""
File metadata for images and other supported file types. If the URL expiration time passes, a new query will refresh
the URL and the URL expiration time.
"""
type File {
    "unique identifier for the `File` object"
    id: ID!
    "file content can be loaded from the given URL if the expiration time has not passed, limited to 1,024 characters"
    url: String!
    "filename with extension, limited to 255 characters, e.g. `image.jpg`"
    name: String!
    "file size in bytes"
    size: Int!
    "MIME content type, limited to 255 characters, e.g. 'image/jpeg'"
    contentType: String!
}

"Describes a Geographic location"
type Location {
    "Human-friendly description, limited to 255 characters, e.g. 'Los Angeles, CA, USA'"
    description: String!
    "Country (ISO 3166-1 Alpha-2 code), e.g. 'US'"
    country: String!
    "Latitude in decimal degrees, e.g. -30.95 = 30 degrees 57 minutes south"
    latitude: Float
    "Longitude in decimal degrees, e.g. -80.05 = 80 degrees 3 minutes west"
    longitude: Float
}

"Specify a Geographic location"
input LocationInput {
    "Human-friendly description, e.g. 'Los Angeles, CA, USA'"
    description: String!
    "Country (ISO 3166-1 Alpha-2 code), e.g. 'US'"
    country: String!
    "Latitude in decimal degrees, e.g. -30.95 = 30 degrees 57 minutes south"
    latitude: Float
    "Longitude in decimal degrees, e.g. -80.05 = 80 degrees 3 minutes west"
    longitude: Float
}

"Meeting, a/k/a Event, to serve as a focal point for finding, answering, carrying, and exchanging requests"
type Meeting {
    "unique identifier for the `Meeting` object"
    id: ID!
    "short name, limited to 80 characters"
    name: String!
    "text-only description, limited to 4096 characters"
    description: String
    "meeting (event) information URL -- should be a full website, but could be an information document such as a pdf"
    moreInfoURL: String
    "date of the first day of the meeting (event)"
    startDate: Date!
    "date of the last day of the meeting (event)"
    endDate: Date!
    "time the meeting (event) was added to the app"
    createdAt: Time!
    "time the meeting (event) was last modified in the app"
    updatedAt: Time!
    "user that added the meeting (event) to the app"
    createdBy: PublicProfile!
    "image file, typically a logo"
    imageFile: File
    "meeting (event) location -- notifications and filters may use this location"
    location: Location!
    "associated Requests"
    requests: [Request!]!
    "NOT YET IMPLEMENTED -- what subset of users can view and interact with this meeting"
    visibility: MeetingVisibility!
    "Invites to the `Meeting` (event) for confirmation to join as a participant"
    invites: [MeetingInvite!]!
    "Participants of a `Meeting` are able to see all requests associated with the `Meeting`"
    participants: [MeetingParticipant!]!
    "Organizers of a `Meeting` are able to make changes and invite people"
    organizers: [PublicProfile!]!
}

input CreateMeetingInput {
    "short name, limited to 80 characters"
    name: String!
    "text-only description, limited to 4096 characters"
    description: String
    "date of the first day of the meeting (event)"
    startDate: Date!
    "date of the last day of the meeting (event)"
    endDate: Date!
    "meeting (event) information URL -- should be a full website, but could be an information document such as a pdf"
    moreInfoURL: String
    "ID of pre-stored image file, typically a logo. Upload using the `upload` REST API endpoint."
    imageFileID: ID
    "meeting (event) location -- notifications and filters may use this location"
    location: LocationInput!
    "NOT YET IMPLEMENTED -- what subset of users can view and interact with this meeting"
    visibility: MeetingVisibility!
}

input UpdateMeetingInput {
    "unique identifier for the `Meeting` object to be modified"
    id: ID!
    "short name, limited to 80 characters"
    name: String!
    "text-only description, limited to 4096 characters. If omitted, any existing text is erased."
    description: String
    "date of the first day of the meeting (event)"
    startDate: Date!
    "date of the last day of the meeting (event)"
    endDate: Date!
    "meeting (event) information URL -- should be a full website. If omitted, any existing URL is erased."
    moreInfoURL: String
    "ID of pre-stored logo file. Upload using the `upload` REST API endpoint. If omitted, existing logo is erased."
    imageFileID: ID
    "meeting (event) location -- notifications and filters may use this location"
    location: LocationInput!
    "NOT YET IMPLEMENTED -- what subset of users can view and interact with this meeting"
    visibility: MeetingVisibility!
}

"""
Invite to a `Meeting`. An invite must be confirmed by the invitee before they may be added to a `Meeting`. Can also
be used as an authentication mechanism to sign on to the App.
"""
type MeetingInvite {
    meeting: Meeting!
    "`User` making the invite"
    inviter: PublicProfile!
    "Email address of the invitee"
    email: String!
    "Gravatar image URL. Always a valid URL, but depending on the email address, it may reference a generic avatar."
    avatarURL: String!
}

"Input object for `createMeetingInvites`"
input CreateMeetingInvitesInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "Email addresses of the invitees. Duplicate values are ignored."
    emails: [String!]!
    "NOT YET IMPLEMENTED -- Send email invites. Default is 'false', do not send any emails."
    sendEmail: Boolean
}

"Input object for `removeMeetingInvite`"
input RemoveMeetingInviteInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "Email addresse of the invitee to remove"
    email: String!
}

"""
Confirmed participant of a `Meeting`. An invited person will not appear as a `MeetingParticipant` until they have
confirmed a `MeetingInvite` or self-joined a non-INVITE_ONLY meeting.
"""
type MeetingParticipant {
    meeting: Meeting!
    "`User` information for the `Meeting` participant"
    user: User!
    "true if `User` is a meeting Organizer"
    isOrganizer: Boolean
    "The `MeetingInvite`, valid if the participant was invited. `null` indicates the `User` self-joined"
    invite: MeetingInvite
}

"Input object for `createMeetingParticipant`"
input CreateMeetingParticipantInput {
    "ID of the `Meeting`"
    meetingID: ID!
    """
    Secret code from the `MeetingInvite` or invite code from the `Meeting`. If the `Meeting` is not `INVITE_ONLY`,
    the code may be omitted.
    """
    code: String
    "NOT YET IMPLEMENTED -- Add as a `Meeting` Organizer. Authenticated `User` must be authorized [definition TBD] to do this. "
    isOrganizer: Boolean
}

"Input object for `removeMeetingParticipant`"
input RemoveMeetingParticipantInput {
    "ID of the `Meeting`"
    meetingID: ID!
    "`User` ID of the `Meeting` participant to remove"
    userID: ID!
}

"In-app chat message"
type Message {
    "unique identifier for the Message"
    id: ID!
    "user profile of the message sender"
    sender: PublicProfile!
    "message content, limited to 4,096 characters"
    content: String!
    "message thread to which this message belongs"
    thread: Thread!
    "time at which the message was created"
    createdAt: Time!
    "time the message was last edited. Compare against `Thread.lastViewedAt` to determine read/unread status."
    updatedAt: Time!
}

input CreateMessageInput {
    "message content, limited to 4,096 characters"
    content: String!
    "ID of the subject Request"
    requestID: String!
    "Message thread to which the new message should be attached. If not specified, a new thread is created."
    threadID: String
}

"""
Organization subscribed to the App. Provides privacy controls for visibility of Requests and Meetings, and specifies
authentication for associated users.
"""
type Organization {
    "unique identifier for the Organization"
    id: ID!
    "Organization name, limited to 255 characters"
    name: String!
    "Website URL of the Organization, limited to 255 characters"
    url: String
    "time at which the Organization was added to the app"
    createdAt: Time!
    "time at which the Organization was last modified in the app"
    updatedAt: Time!
    """
    Internet domains owned by the organization. Only one organization can own a domain. Users with email addresses on
    this Organization's domain(s) will authenticate using this Organization's authentication method
    """
    domains: [OrganizationDomain!]!
    "URL of an image file for the Organization's logo"
    logoURL: String
    "Trusted (affiliated) organizations. Requests can be shared between organizations that have a OrganizationTrust"
    trustedOrganizations: [Organization!]!
}

input CreateOrganizationInput {
    "Organization name, limited to 255 characters"
    name: String!
    "Website URL of the Organization, limited to 255 characters"
    url: String
    "Authentication type for the organization. Can be `saml`, `google`, or `azureadv2`."
    authType: AuthType!
    "Authentication configuration. See https://github.com/silinternational/wecarry-api/blob/master/README.md"
    authConfig: String!
    "ID of pre-stored image logo file. Upload using the `upload` REST API endpoint."
    logoFileID: ID
}

input UpdateOrganizationInput {
    "unique identifier for the Organization to be updated"
    id: ID!
    "Organization name, limited to 255 characters"
    name: String!
    "Website URL of the Organization, limited to 255 characters. If omitted, existing URL is erased."
    url: String
    "Authentication type for the organization. Can be 'saml', 'google', or 'azureadv2'."
    authType: AuthType!
    "Authentication configuration. See https://github.com/silinternational/wecarry-api/blob/master/README.md"
    authConfig: String!
    "ID of image logo file. Upload using the `upload` REST API endpoint. If omitted, existing logo is erased."
    logoFileID: ID
}

"""
Internet domains owned by the organization. Only one organization can own a domain. Users with email addresses on
an Organization's domain(s) will authenticate using that Organization's authentication method
"""
type OrganizationDomain {
    "domain name, limited to 255 characters"
    domain: String!
    "Organization that owns this domain"
    organization: Organization!
    "Authentication type, overriding the Organization's `authType`. Can be: `saml`, `google`, `azureadv2`."
    authType: AuthType!
    """
    Authentication configuration, overriding the Organization's `authConfig. See
    https://github.com/silinternational/wecarry-api/blob/master/README.md
    """
    authConfig: String!
}

input CreateOrganizationDomainInput {
    "domain name, limited to 255 characters"
    domain: String!
    "ID of the Organization that owns this domain"
    organizationID: ID!
    "Authentication type, overriding the Organization's `authType`. Can be: `saml`, `google`, `azureadv2`."
    authType: AuthType!
    """
    Authentication configuration, overriding the Organization's `authConfig. See
    https://github.com/silinternational/wecarry-api/blob/master/README.md
    """
    authConfig: String
}

input RemoveOrganizationDomainInput {
    "domain name, limited to 255 characters"
    domain: String!
    "ID of the Organization that owns this domain"
    organizationID: ID!
}

input CreateOrganizationTrustInput {
    "ID of one of the two Organizations to join in a trusted affiliation"
    primaryID: ID!
    "ID of the second of two Organizations to join in a trusted affiliation"
    secondaryID: ID!
}

input RemoveOrganizationTrustInput {
    "ID of one of the two Organizations in the trust to be removed"
    primaryID: ID!
    "ID of the second of two Organizations in the trust to be removed"
    secondaryID: ID!
}

type Request {
    "unique identifier for the Request"
    id: ID!
    "Profile of the user that created this request."
    createdBy: PublicProfile!
    "Profile of the user that is the provider for this request."
    provider: PublicProfile
    "Users that have offered to carry this request."
    potentialProviders: [PublicProfile!]
    "Organization associated with this request."
    organization: Organization
    "Short description of item, limited to 255 characters"
    title: String!
    "Optional, longer description of the item, limited to 4,096 characters"
    description: String
    "Geographic location where item is needed"
    destination: Location!
    "Date (yyyy-mm-dd) before which the item will be needed. The record may be hidden or removed after this date."
    neededBefore: Date
    "Date (yyyy-mm-dd) on which the request moved into the COMPLETED status"
    completedOn: Date
    "Optional geographic location where the item can be picked up, purchased, or otherwise obtained"
    origin: Location
    "Broad category of the size of item"
    size: RequestSize!
    "Status of the request. Use mutation `updateRequestStatus` to change the status."
    status: RequestStatus!
    """
    List of this request's actions available to the current user. These can be ...
     "reopen": request creator reverts the status of the request to OPEN
     "offer": non-creator offers to fulfill the request (addMeAsPotentialProvider)
     "retractOffer": offerer retracts offer to fulfill a request (removeMeAsPotentialProvider)
     "accept": request creator accepts someone's offer
     "deliver": request provider claims to have fulfilled the request
     "receive": request creator claims to have received the request
     "remove": request creator cancels the request altogether
    """
    actions: [String!]!
    "List of message threads associated with this request"
    threads: [Thread!]!
    "Date and time this request was created"
    createdAt: Time!
    "Date and time this request was last updated"
    updatedAt: Time!
    "Optional URL to further describe or point to detail about the item, limited to 255 characters"
    url: String
    "Optional weight of the item, measured in kilograms"
    kilograms: Float
    "Photo of the item"
    photo: File
    "UUID of the photo of the item"
    photoID: ID
    "List of attached files. Does not include the request photo."
    files: [File!]!
    "Meeting associated with this request. Affects visibility of the request."
    meeting: Meeting
    "Dynamically set to indicate if the current user is allowed to edit this request using the `updateRequest` mutation"
    isEditable: Boolean!
    "Visibility restrictions for this request"
    visibility: RequestVisibility!
}

input CreateRequestInput {
    "ID of associated Organization. Affects visibility of the request, see also the `visibility` field."
    orgID: String!
    "Short description, limited to 255 characters"
    title: String!
    "Optional, longer description, limited to 4096 characters"
    description: String
    "Geographic location where item is needed"
    destination: LocationInput!
    "Date (yyyy-mm-dd) before which the item will be needed. The record may be hidden or removed after this date."
    neededBefore: Date
    "Optional geographic location where the item can be picked up, purchased, or otherwise obtained"
    origin: LocationInput
    "Broad category of the size of item"
    size: RequestSize!
    "Optional URL to further describe or point to detail about the item, limited to 255 characters"
    url: String
    "Optional weight of the item, measured in kilograms"
    kilograms: Float
    "Optional photo `file` ID. First upload a file using the `/upload` REST API and then submit its ID here."
    photoID: ID
    "Optional meeting ID. Affects visibility of the request."
    meetingID: ID
    "Visibility restrictions for this request"
    visibility: RequestVisibility
}

input UpdateRequestInput {
    "ID of the request to update"
    id: ID!
    "Short description, limited to 255 characters. If omitted or `null`, no change is made."
    title: String
    "Longer description, limited to 4096 characters. If omitted or `null`, the description is removed"
    description: String
    "Geographic location where item is needed. If omitted or `null`, no change is made."
    destination: LocationInput
    """
    Date (yyyy-mm-dd) before which the item will be needed. The record may be hidden or removed after this date. If
    omitted or `null`, the date is removed.
    """
    neededBefore: Date
    """
    Optional geographic location where the item can be picked up, purchased, or otherwise obtained. If omitted or
    `null`, the origin location is removed.
    """
    origin: LocationInput
    "Broad category of the size of item. If omitted or `null`, no change is made."
    size: RequestSize
    "Optional URL to further describe or point to detail about the item. If omitted or `null`, the URL is removed."
    url: String
    "Optional weight of the item, measured in kilograms. If omitted or `null`, the value is removed."
    kilograms: Float
    """
    Optional photo `file` ID. First upload a file using the `/upload` REST API and then submit its ID here. Any
    previously attached photo will be deleted. If omitted or `null`, no photo will be attached to this request.
    """
    photoID: ID
    "Visibility restrictions for this request. If omitted or `null`, the visibility is set to `ALL`."
    visibility: RequestVisibility
}

input UpdateRequestStatusInput {
    "ID of the request to update"
    id: ID!
    "New Status. Only a limited set of transitions are allowed."
    status: RequestStatus!
    "User ID of the accepted provider. Required if `status` is ACCEPTED and ignored otherwise."
    providerUserID: ID
}

"In-App Message Thread"
type Thread {
    "unique identifier for the message thread"
    id: ID!
    "Users participating in the message thread. The request creator is automatically added to all of the requests's threads"
    participants: [PublicProfile!]!
    "Messages on the thread"
    messages: [Message!]!
    "Request that owns this message thread"
    request: Request!
    "The time the auth user last viewed this thread. Messages with `updatedAt` after this time can be considered unread."
    lastViewedAt: Time!
    "The time this thread was started"
    createdAt: Time!
    "The time this thread was last updated or messages added to the thread"
    updatedAt: Time!
    "The number of messages unread by the auth user"
    unreadMessageCount: Int!
}

input SetThreadLastViewedAtInput {
    threadID: ID!
    time: Time!
}

"Attributes of a user of the App"
type User {
    "unique identifier for the User"
    id: ID!
    "Email address to be used for notifications to the User. Not necessarily the same as the authentication email."
    email: String!
    "User's nickname. Auto-assigned upon creation of a User, but editable by the User. Limited to 255 characters."
    nickname: String!
    "Time the user was added to the App"
    createdAt: Time!
    "Time the user profile was last edited"
    updatedAt: Time!
    "An admin role other than the default (USER) provides additional privileges"
    adminRole: UserAdminRole
    "avatarURL is generated from an attached photo if present, an external URL if present, or a Gravatar URL"
    avatarURL: String
    "`File` ID of the user's photo, if present"
    photoID: String
    preferences: UserPreferences!
    "user's home location"
    location: Location
    unreadMessageCount: Int!
    "Organizations that the User is affilated with. This can be empty or have a single entry. Future capability is TBD"
    organizations: [Organization!]!
    "A list of the user's requests, as determined by the given RequestRole relationship"
    requests(role: RequestRole!): [Request!]!
    "meetings in which the user is a participant"
    meetingsAsParticipant: [Meeting!]!
}

"User fields that can safely be visible to any user in the system"
type PublicProfile {
    "unique identifier for the User, the same value as in the `User` type"
    id: ID!
    "User's nickname. Auto-assigned upon creation of a User, but editable by the User. Limited to 255 characters."
    nickname: String!
    "avatarURL is generated from an attached photo if present, an external URL if present, or a Gravatar URL"
    avatarURL: String
}

"Input object for `updateUser`"
input UpdateUserInput {
    "unique identifier for the User to be updated"
    id: ID
    "User's nickname. Auto-assigned upon creation of a User, but editable by the User. Limited to 255 characters."
    nickname: String
    "File ID of avatar photo. If omitted or `null`, the photo is removed from the profile."
    photoID: ID
    "Specify the user's 'home' location. If omitted or `null`, the location is removed from the profile."
    location: LocationInput
    "New user preferences. If `null` no changes are made."
    preferences: UpdateUserPreferencesInput
}

type UserPreferences {
    "preferred language for translation of App text, including notifications and error messages"
    language: PreferredLanguage
    "preferred time zone for localization of dates and times, particularly in notification messages"
    timeZone: String
    "preferred weight unit for customized display of weight quantities"
    weightUnit: PreferredWeightUnit
}

input UpdateUserPreferencesInput {
    "preferred language -- if omitted, the preference is set to the App default"
    language: PreferredLanguage
    "time zone -- if omitted, the preference is set to the App default"
    timeZone: String
    "weight unit-- if omitted, the preference is set to the App default"
    weightUnit: PreferredWeightUnit
}

"""
A Watch for specified filter criteria. New requests matching all of the given criteria will generate a new
notification.
"""
type Watch {
    "unique identifier for the Watch"
    id: ID!
    "Owner of the Watch, and the recipient of notifications for this Watch"
    owner: PublicProfile!
    "Short description, as named by the Watch creator"
    name: String!
    "Destination to watch. If a new request has a destination near this location, a notification will be sent."
    destination: Location
    "Origin to watch. If a new request has an origin near this location, a notification will be sent."
    origin: Location
    "Meeting to watch. Notifications will be sent for new requests tied to this event."
    meeting: Meeting
    "Search by text in request `title` or `description`"
    searchText: String
    "Maximum size of a requested item"
    size: RequestSize
}

input CreateWatchInput {
    "Short description, as named by the Watch creator"
    name: String!
    "Destination to watch. If a new request has a destination near this location, a notification will be sent."
    destination: LocationInput
    "Origin to watch. If a new request has an origin near this location, a notification will be sent."
    origin: LocationInput
    "Meeting to watch. Notifications will be sent for new requests tied to this event."
    meetingID: ID
    "Search by text in `title` or `description`"
    searchText: String
    "Maximum size of a requested item"
    size: RequestSize
}

input RemoveWatchInput {
    "unique identifier for the Watch to be removed"
    id: ID!
}

"""
Properties to update on the Watch identified by the given ID. If any parameter is omitted or null, that parameter
will be removed from the Watch criteria.
"""
input UpdateWatchInput {
    "unique identifier for the Watch to be updated"
    id: ID!
    "Short description, as named by the Watch creator"
    name: String!
    "Destination to watch. If a new request has a destination near this location, a notification will be sent."
    destination: LocationInput
    "Origin to watch. If a new request has an origin near this location, a notification will be sent."
    origin: LocationInput
    "Meeting to watch. Notifications will be sent for new requests tied to this event."
    meetingID: ID
    "Search by text in `title` or `description`"
    searchText: String
    "Maximum size of a requested item"
    size: RequestSize
}
